{
  "$schema": "./node_modules/@biomejs/biome/configuration_schema.json",
  "files": {
    "ignoreUnknown": false,
    "includes": ["**"]
  },
  "vcs": {
    "clientKind": "git",
    "defaultBranch": "master",
    "enabled": true,
    "useIgnoreFile": true
  },

  // FORMATTER
  "html": { "formatter": { "selfCloseVoidElements": "always" } },
  "formatter": {
    "enabled": true,
    "formatWithErrors": false,
    "indentStyle": "space",
    "indentWidth": 2,
    "lineEnding": "lf",
    "lineWidth": 80,
    "attributePosition": "auto",
    "bracketSameLine": false,
    "bracketSpacing": true,
    "expand": "auto",
    "useEditorconfig": true
  },
  "assist": {
    "enabled": true,
    "actions": {
      "source": {
        "useSortedAttributes": "on",
        "useSortedKeys": "on",
        "useSortedProperties": "on",
        "organizeImports": {
          "level": "on",
          "options": {
            "groups": [
              /* Core */
              { "type": false, "source": [":NODE:"] }, // node built-ins
              "react", // renderer
              "react-router", // router
              ["ramda", "use-debounce"],
              ["motion"], // animations
              ["cva", "classnames", "clsx"], // style utils
              ":PACKAGE:", // rest of packages

              ":BLANK_LINE:",

              /* Components */
              "@/app/**",
              "@/app/parts/**",
              "@/pages/**",
              "@/components/**",
              "@/elements/**",

              ":BLANK_LINE:",

              /* Instruments */
              ["@/lib", "@/lib/**"],
              ["@/lib/api", "@/lib/api/**"],
              "@/helpers/**",
              "@/utils/**",
              "@/hooks/**",

              ":BLANK_LINE:",

              "./parts/**",
              ":PATH:" // any other absolute or relative path — local components, helpers, styles
            ]
          }
        }
      }
    }
  },
  "javascript": {
    "parser": {
      "jsxEverywhere": false
    },
    "globals": ["React", "__DEV__", "__STAGE__", "__PROD__"],
    "jsxRuntime": "transparent",
    "formatter": {
      "quoteStyle": "single",
      "jsxQuoteStyle": "single",
      "quoteProperties": "asNeeded",
      "trailingCommas": "all",
      "semicolons": "always",
      "arrowParentheses": "always",
      "bracketSameLine": true,
      "bracketSpacing": true,
      "attributePosition": "auto"
    }
  },
  "json": {
    "formatter": {
      "indentStyle": "space"
    },
    "parser": {
      "allowComments": true,
      "allowTrailingCommas": true
    }
  },
  "css": {
    "parser": {
      "cssModules": true,
      "allowWrongLineComments": false
    }
  },
  // FORMATTER

  // LINTER
  "linter": {
    "domains": {
      "project": "recommended"
    },
    "enabled": true,
    "rules": {
      /* rules focused on preventing accessibility problems */
      "a11y": {
        "useButtonType": "warn", // ultracite rule
        "noNoninteractiveElementInteractions": "error"
      },

      /* rules that focus on inspecting complex code that could be simplified. */
      "complexity": {
        "noExcessiveCognitiveComplexity": "off", // when code do smell, clean up the spell.
        "noImplicitCoercions": "off", // ultracite rule — implicit boolean coercions are cool.

        /* React */
        "noUselessFragments": "error"
      },

      /* rules that detect code that is guaranteed to be incorrect or useless. */
      "correctness": {
        "noUnusedVariables": {
          "level": "warn",
          "fix": "none" // do not let biome fix unused variables by prefixing with _ — review and handle these manually
        },
        "noUndeclaredDependencies": "error",

        /* React */
        "noRenderReturnValue": "error",
        "useHookAtTopLevel": "error",
        "useExhaustiveDependencies": {
          /* handle useEffect manually */
          "fix": "none",
          "level": "warn"
        },
        "useJsxKeyInIterable": {
          "level": "error",
          "options": { "checkShorthandFragments": true }
        },
        "noChildrenProp": "warn",
        "noVoidElementsWithChildren": "error",
        "noNestedComponentDefinitions": "error",
        "noReactPropAssignments": "error",
        "useUniqueElementIds": "off" // TODO it is useful — fix and enable
      },

      /* rules under development */
      "nursery": {
        "useConsistentTypeDefinitions": "off" // ultracite rule — type and interface are useful in different situations.
      },

      /* rules catching ways your code could be written to run faster, or generally be more efficient. */
      "performance": {
        "noNamespaceImport": "off" // ultracite rule — namespace imports are useful. rely on your own fell when to use it.
      },

      /* rules that detect ways your code could be exploited or lead to security vulnerabilities. */
      "security": {
        /* React */
        "noBlankTarget": "error",
        "noDangerouslySetInnerHtml": "info",
        "noDangerouslySetInnerHtmlWithChildren": "info"
      },

      /* rules enforcing a consistent and idiomatic way of writing your code. By default, these rules will only generate warnings instead of errors. */
      "style": {
        "noDefaultExport": "error", // ultracite rule — exterminate all defaul exports.
        "useFilenamingConvention": "off", // ultracite rule — move to kebab-case later.
        "useBlockStatements": "off", // ultracite rule — sometimes if-one-liners are pretty.
        "noMagicNumbers": "off", // ultracite rule — sometimes magic numbers are useful.

        /* React */
        "useComponentExportOnlyModules": "off", // TODO thus rule is probably useful — review it and enable
        "noImplicitBoolean": "off", // shortstand boolean props are actually cool
        "useConsistentCurlyBraces": "warn",
        "useFragmentSyntax": "info"
      },

      /* rules that detect code that is likely to be incorrect or useless. */
      "suspicious": {
        "noConsole": {
          // ultracite rule — lint for console.log only, allow everything else
          "level": "warn",
          "options": {
            "allow": ["assert", "error", "info", "warn"]
          }
        },
        "noUnknownAtRules": "off", // ultracite rule — there are too much custom at-rules from tailwind. review this rule when it will go out from nursery.

        /* React */
        "useBiomeIgnoreFolder": "error",
        "noArrayIndexKey": "error",
        "noDuplicateJsxProps": "error",
        "noSuspiciousSemicolonInJsx": "error",
        "noCommentText": "error"
      }
    }
  },
  // OVERRIDES

  // LINTER
  "overrides": [
    // do not sort special files — they are better to organize manually
    {
      "assist": {
        "actions": {
          "source": {
            "useSortedKeys": "off"
          }
        }
      },
      "includes": [
        "biome.jsonc", // same level
        "**/biome.jsonc", // sub-folders

        "biome.*.jsonc",
        "**/biome.*.jsonc",

        "package.json",
        "**/package.json",

        "tsconfig.json",
        "**/tsconfig.json",

        "components.json",
        "**/components.json",

        ".prettierrc.js",
        "**/.prettierrc.js"
      ]
    },

    // some frameworks and tools expect entities to be exported due to buil-in api
    // disable noDefaultExport for these cases
    {
      "linter": {
        "rules": {
          "style": {
            "noDefaultExport": {
              "level": "off"
            }
          }
        }
      },
      "includes": [
        // Next.js
        "next.config.ts",
        "**/next.config.ts",
        "apps/**/next.config.ts",

        "**/app/**/{layout,page,loading,error,not-found,default}.tsx",
        "apps/**/app/**/{layout,page,loading,error,not-found,default}.tsx",

        "src/**/middleware.ts",
        "apps/**/src/**/middleware.ts",

        "src/**/_middleware.ts",
        "apps/**/src/**/_middleware.ts",

        // Vite
        "vite.config.ts",
        "**/vite.config.ts",

        // Convex
        "**/convex/**",

        // Prisma
        "prisma.config.ts",
        "**/prisma.config.ts",

        // TypeScript
        "*.d.ts",
        "**/*.d.ts",

        // Other configs
        "prettier.config.mjs",
        "**/prettier.config.mjs",

        "postcss.config.mjs",
        "**/postcss.config.mjs",

        "knip.ts",
        "**/knip.ts"
      ]
    },

    // disable linter enitrely for generated files
    {
      "linter": {
        "enabled": false
      },
      "includes": [
        "apps/**/convex/_generated/**",
        "apps/**/graphql/index.{ts,tsx}"
      ]
    }
  ]
  // OVERRIDES
}
